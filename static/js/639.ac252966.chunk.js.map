{"version":3,"file":"static/js/639.ac252966.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","components/EditModal/EditModal.jsx","components/ContactItemControl/BurgerMenu.jsx","components/ContactItemControl/DecktopMenu.jsx","components/ContactItemControl/ContactItemControl.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Button, FormControl, FormLabel, Input, Text } from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { useContacts } from 'hooks';\nimport { addContact } from 'redux/contacts/operations';\nimport { checkTheSameNames } from 'utils/commonFunctions';\n\nexport const ContactForm = () => {\n  const [isAdding, setIsAdding] = useState(false);\n  const { contacts } = useContacts();\n  const requiedMessage = 'Fill in this field!';\n  const dispatch = useDispatch();\n\n  const intialValues = {\n    name: '',\n    number: '',\n  };\n  const validationSchema = yup.object().shape({\n    name: yup.string().min(3).required(requiedMessage),\n    number: yup.string().required(requiedMessage),\n  });\n\n  const handleSubmit = (newContact, { resetForm }) => {\n    if (checkTheSameNames(contacts, newContact.name))\n      return Notify.info(\n        `${newContact.name} is alredy in contacts, maybe you were mistaken?`,\n        { width: '400px' }\n      );\n\n    setIsAdding(true);\n    dispatch(addContact(newContact)).finally(() => setIsAdding(false));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={intialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormControl as={Form} mb=\"10px\">\n        <FormLabel htmlFor=\"name\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Name\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"number\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Number\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"tel\" name=\"number\" />\n          <ErrorMessage\n            name=\"number\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          rightIcon={<AddIcon />}\n          isLoading={isAdding && contacts.length > 0}\n          loadingText=\"Adding...\"\n          colorScheme=\"blue\"\n          variant=\"outline\"\n        >\n          Add contact\n        </Button>\n      </FormControl>\n    </Formik>\n  );\n};\n","import PropTypes from 'prop-types';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n} from '@chakra-ui/react';\nimport { EditIcon } from '@chakra-ui/icons';\nimport { editContact } from 'redux/contacts/operations';\nimport { checkTheSameNames } from 'utils/commonFunctions';\nimport { useContacts } from 'hooks';\n\nexport const EditForm = ({ initialName, initialNumber, id, handleClose }) => {\n  const [isSubmittingChanges, setIsSubmittingChanges] = useState(false);\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  const intialValues = {\n    name: initialName,\n    number: initialNumber,\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup.string().required('Fill in this field!'),\n    number: yup.string().required('Fill in this field!'),\n  });\n\n  const handleSubmit = ({ name, number }) => {\n    if (name === initialName && number === initialNumber)\n      return Notify.info('There is no changes!');\n    if (checkTheSameNames(contacts, name))\n      return Notify.info(\n        `${name} is alredy in contacts, maybe you were mistaken?`,\n        { width: '400px' }\n      );\n\n    setIsSubmittingChanges(true);\n\n    dispatch(editContact({ name, number, id })).finally(() =>\n      setIsSubmittingChanges(false)\n    );\n\n    handleClose();\n  };\n\n  return (\n    <Formik\n      initialValues={intialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormControl as={Form} mb=\"32px\" display=\"flex\" flexDirection=\"column\">\n        <FormLabel htmlFor=\"name\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Name\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"number\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Number\n          </Text>\n\n          <Input as={Field} variant=\"filled\" type=\"tel\" name=\"number\" />\n          <ErrorMessage\n            name=\"number\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <Box ml=\"auto\">\n          <Button\n            type=\"button\"\n            colorScheme=\"blue\"\n            variant=\"outline\"\n            mr={3}\n            onClick={handleClose}\n            ml=\"auto\"\n          >\n            Close\n          </Button>\n          <Button\n            type=\"submit\"\n            rightIcon={<EditIcon />}\n            isLoading={isSubmittingChanges}\n            loadingText=\"Editing...\"\n            colorScheme=\"blue\"\n            variant=\"outline\"\n          >\n            Edit contact\n          </Button>\n        </Box>\n      </FormControl>\n    </Formik>\n  );\n};\n\nEditForm.propTypes = {\n  initialName: PropTypes.string.isRequired,\n  initialNumber: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { EditForm } from 'components/EditForm';\n\nexport const EditMoodal = ({ isOpen, handleClose, ...userData }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose}>\n      <ModalOverlay />\n\n      <ModalContent>\n        <ModalHeader>Change your contact!</ModalHeader>\n\n        <ModalCloseButton as=\"button\" />\n\n        <ModalBody>\n          <EditForm handleClose={handleClose} {...userData} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nEditMoodal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport {\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n} from '@chakra-ui/react';\nimport { EditMoodal } from 'components/EditModal';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { copy } from 'utils/commonFunctions';\nimport { CopyIcon, DeleteIcon, EditIcon, SettingsIcon } from '@chakra-ui/icons';\n\nexport const BurgerMenu = ({ contactName, contactNumber, contactId }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleEditor = () => setIsEditing(prevIsEditing => !prevIsEditing);\n\n  const handleDelete = evt => {\n    const { contactid } = evt.target.dataset;\n    dispatch(deleteContact(contactid)).then(response => {\n      // if  payload isn`t a object means that a mistake happened during the http-request\n      if (typeof response.payload !== 'object')\n        Notify.failure(\n          'Oops! Sorry, but something was wrong, please try again'\n        );\n    });\n  };\n\n  return (\n    <Menu>\n      <MenuButton\n        as={IconButton}\n        aria-label=\"Options\"\n        icon={<SettingsIcon />}\n        variant=\"outline\"\n        colorScheme=\"blue\"\n      />\n      <MenuList>\n        <MenuItem\n          icon={<CopyIcon />}\n          onClick={() => copy(contactNumber, 'Number was copied!')}\n        >\n          Copy\n        </MenuItem>\n        <MenuItem icon={<EditIcon />} onClick={toggleEditor}>\n          Edit\n          <EditMoodal\n            isOpen={isEditing}\n            handleClose={toggleEditor}\n            initialName={contactName}\n            initialNumber={contactNumber}\n            id={contactId}\n          />\n        </MenuItem>\n\n        <MenuItem\n          icon={<DeleteIcon />}\n          data-contactid={contactId}\n          onClick={handleDelete}\n        >\n          Delete\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n};\n\nBurgerMenu.propTypes = {\n  contactNumber: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { Flex } from '@chakra-ui/react';\nimport { ContactButton } from 'components/Buttons';\nimport { EditMoodal } from 'components/EditModal';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { copy } from 'utils/commonFunctions';\n\nexport const DecktopMenu = ({ contactName, contactNumber, contactId }) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleEditor = () => {\n    setIsEditing(prevIsEditing => !prevIsEditing);\n  };\n\n  const handleDelete = evt => {\n    setIsDeleting(true);\n\n    const { contactid } = evt.target.dataset;\n\n    dispatch(deleteContact(contactid))\n      .then(response => {\n        // if  payload isn`t a object means that a mistake happened during the http-request\n        if (typeof response.payload !== 'object')\n          Notify.failure(\n            'Oops! Sorry, but something was wrong, please try again'\n          );\n      })\n      .finally(() => setIsDeleting(false));\n  };\n\n  return (\n    <Flex gap=\"14px\">\n      <ContactButton callback={() => copy(contactNumber, 'Number was copied!')}>\n        Copy\n      </ContactButton>\n      <ContactButton callback={toggleEditor}>\n        Edit\n        <EditMoodal\n          isOpen={isEditing}\n          handleClose={toggleEditor}\n          initialName={contactName}\n          initialNumber={contactNumber}\n          id={contactId}\n        />\n      </ContactButton>\n      <ContactButton\n        callback={handleDelete}\n        contactId={contactId}\n        isDeleting={isDeleting}\n      >\n        Delete\n      </ContactButton>\n    </Flex>\n  );\n};\n\nDecktopMenu.propTypes = {\n  contactNumber: PropTypes.string.isRequired,\n};\n","import { BurgerMenu } from './BurgerMenu';\nimport { DecktopMenu } from './DecktopMenu';\nimport { getViewportWidth } from 'utils/commonFunctions';\n\n// userData is object: { contactName, contactNumber, contactId }\n// 620px is breaking point for my pet project\nexport const ContactItemControl = userData => {\n  return getViewportWidth() < 620 ? (\n    <BurgerMenu {...userData} />\n  ) : (\n    <DecktopMenu {...userData} />\n  );\n};\n","import PropTypes from 'prop-types';\nimport { ListItem, Card, CardBody, Flex, Text } from '@chakra-ui/react';\nimport { ContactItemControl } from 'components/ContactItemControl';\n\nexport const ContactItem = ({ id, name, number }) => {\n  return (\n    <Card as={ListItem} key={id} variant=\"outline\">\n      <CardBody\n        as={Flex}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        p=\"8px\"\n      >\n        <Text\n          fontSize=\"2xl\"\n          overflow=\"hidden\"\n          style={{ textWrap: 'nowrap' }}\n          textOverflow=\"ellipsis\"\n          maxW=\"calc(100% - 8px * 2 - 50px)\"\n          mr=\"6px\"\n        >\n          {name} : {number}\n        </Text>\n        <ContactItemControl\n          contactName={name}\n          contactNumber={number}\n          contactId={id}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, Heading, List } from '@chakra-ui/react';\nimport { useAuth, useContacts } from 'hooks';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactItem } from 'components/ContactItem';\nimport { Loader } from 'components/Loaders';\n\nexport const ContactList = () => {\n  const { isLoggedIn } = useAuth();\n  const { contacts, isLoading, error, filter } = useContacts();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    isLoggedIn && dispatch(fetchContacts());\n  }, [isLoggedIn, dispatch]);\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const shouldShowLoader = isLoading && !error && contacts.length === 0;\n\n  return (\n    <>\n      <Box\n        padding=\"5% calc(50% - 24px)\"\n        display={shouldShowLoader ? 'block' : 'none'}\n      >\n        <Loader />\n      </Box>\n\n      {contacts.length === 0 && !shouldShowLoader ? (\n        <Box margin=\"auto\" width=\"100%\" textAlign=\"center\">\n          <Heading color=\"blue.600\">Add your first contact!</Heading>\n        </Box>\n      ) : (\n        <List w=\"100%\" display=\"flex\" flexDirection=\"column\" gap=\"16px\">\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactItem key={id} id={id} name={name} number={number} />\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { FormLabel, Input, Text } from '@chakra-ui/react';\nimport { useContacts } from 'hooks';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const { filter } = useContacts();\n  const dispatch = useDispatch();\n\n  const onInput = evt => {\n    const { value } = evt.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <FormLabel htmlFor=\"filter\" m=\"0 0 20px 0\">\n      <Text fontSize=\"xl\" mb={1}>\n        Find contacts by name\n      </Text>\n      <Input\n        variant=\"filled\"\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={onInput}\n      />\n    </FormLabel>\n  );\n};\n","import { Flex } from '@chakra-ui/react';\nimport { CenterContainer } from 'components/CenterContainer';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { getViewportWidth } from 'utils/commonFunctions';\n\nconst Contacts = () => {\n  const shouldChangeDisplaySettings = getViewportWidth() <= 620;\n\n  return (\n    <CenterContainer\n      flexDirection={shouldChangeDisplaySettings ? 'column' : 'row'}\n    >\n      <Flex\n        flexDirection=\"column\"\n        w={shouldChangeDisplaySettings ? '100%' : '300px'}\n        mr={shouldChangeDisplaySettings ? '0px' : '20px'}\n      >\n        <ContactForm />\n        <Filter />\n      </Flex>\n\n      <ContactList />\n    </CenterContainer>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactForm","useState","isAdding","setIsAdding","contacts","useContacts","requiedMessage","dispatch","useDispatch","validationSchema","yup","shape","name","min","required","number","initialValues","onSubmit","newContact","resetForm","checkTheSameNames","Notify","width","addContact","finally","as","Form","mb","htmlFor","m","fontSize","I","Field","variant","type","component","Text","color","rightIcon","isLoading","length","loadingText","colorScheme","EditForm","initialName","initialNumber","id","handleClose","isSubmittingChanges","setIsSubmittingChanges","intialValues","editContact","display","flexDirection","ml","mr","onClick","EditMoodal","isOpen","userData","onClose","BurgerMenu","contactName","contactNumber","contactId","isEditing","setIsEditing","toggleEditor","prevIsEditing","IconButton","icon","copy","evt","contactid","target","dataset","deleteContact","then","response","payload","DecktopMenu","isDeleting","setIsDeleting","gap","callback","ContactItemControl","getViewportWidth","ContactItem","ListItem","Flex","justifyContent","alignItems","p","overflow","style","textWrap","textOverflow","maxW","ContactList","isLoggedIn","useAuth","error","filter","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","shouldShowLoader","padding","w","map","margin","textAlign","Filter","value","pattern","title","onChange","changeFilter","shouldChangeDisplaySettings","CenterContainer"],"sourceRoot":""}