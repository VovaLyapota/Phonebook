{"version":3,"file":"static/js/152.c8466587.chunk.js","mappings":"kUAQaA,EAAmB,WAC9B,OAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAiB,sBACjBC,GAAWC,EAAAA,EAAAA,MAQXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,SAASR,GACnCS,MAAOL,EAAAA,KAAaK,QAAQD,SAASR,GACrCU,SAAUN,EAAAA,KAAaG,IAAI,GAAGC,SAASR,KAmBzC,OACE,SAAC,KAAD,CACEW,cA9BiB,CACnBL,KAAM,GACNG,MAAO,GACPC,SAAU,IA4BRP,iBAAkBA,EAClBS,SApBiB,SAACC,EAAD,GAA8B,IAAjBC,EAAgB,EAAhBA,UAChCf,GAAgB,GAEhBE,GAASc,EAAAA,EAAAA,IAASF,IACfG,MAAK,SAAAC,GAEJ,GAAgC,kBAArBA,EAASC,QAClB,OAAOC,EAAAA,OAAAA,QACL,iDAGJL,GACD,IACAM,SAAQ,kBAAMrB,GAAgB,EAAtB,GACZ,EAGC,UAKE,UAAC,KAAD,CAAasB,GAAIC,EAAAA,GAAMC,KAAK,QAAQC,OAAO,WAA3C,WACE,UAAC,IAAD,CAAWC,QAAQ,OAAOC,EAAE,YAA5B,WACE,SAAC,IAAD,CAAMC,SAAS,KAAKC,GAAI,EAAxB,SAA2B,cAG3B,SAAC,EAAAC,EAAD,CAAOR,GAAIS,EAAAA,GAAOC,QAAQ,SAASC,KAAK,OAAO1B,KAAK,UACpD,SAAC,KAAD,CACEA,KAAK,OACL2B,UAAWC,EAAAA,EACXP,SAAS,KACTQ,MAAM,YAGV,UAAC,IAAD,CAAWV,QAAQ,OAAOC,EAAE,YAA5B,WACE,SAAC,IAAD,CAAMC,SAAS,KAAKC,GAAI,EAAxB,SAA2B,WAG3B,SAAC,EAAAC,EAAD,CAAOR,GAAIS,EAAAA,GAAOC,QAAQ,SAASC,KAAK,QAAQ1B,KAAK,WACrD,SAAC,KAAD,CACEA,KAAK,QACL2B,UAAWC,EAAAA,EACXP,SAAS,KACTQ,MAAM,YAGV,UAAC,IAAD,CAAWV,QAAQ,OAAOC,EAAE,YAA5B,WACE,SAAC,IAAD,CAAMC,SAAS,KAAKC,GAAI,EAAxB,SAA2B,cAG3B,SAAC,EAAAC,EAAD,CAAOR,GAAIS,EAAAA,GAAOC,QAAQ,SAASC,KAAK,WAAW1B,KAAK,cACxD,SAAC,KAAD,CACEA,KAAK,WACL2B,UAAWC,EAAAA,EACXP,SAAS,KACTQ,MAAM,YAGV,SAAC,IAAD,CACEH,KAAK,SACLI,UAAWtC,EACXuC,YAAY,UACZC,YAAY,OACZP,QAAQ,UACRQ,EAAE,OANJ,SAOC,iBAMR,ECtFD,EARiB,WACf,OACE,SAACC,EAAA,EAAD,WACE,SAAC5C,EAAD,KAGL,C","sources":["components/RegistrationForm/RegistrationForm.jsx","pages/Register.jsx"],"sourcesContent":["import * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Button, FormControl, FormLabel, Input, Text } from '@chakra-ui/react';\nimport { register } from 'redux/auth/operations';\n\nexport const RegistrationForm = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const requiedMessage = 'Fill in this field!';\n  const dispatch = useDispatch();\n\n  const intialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup.string().min(3).required(requiedMessage),\n    email: yup.string().email().required(requiedMessage),\n    password: yup.string().min(7).required(requiedMessage),\n  });\n\n  const handleSubmit = (userData, { resetForm }) => {\n    setIsSubmitting(true);\n\n    dispatch(register(userData))\n      .then(response => {\n        // if  payload isn`t a object means that a mistake happened during the http-request\n        if (typeof response.payload !== 'object')\n          return Notify.failure(\n            'Oops! This email has alredy been registrated!'\n          );\n\n        resetForm();\n      })\n      .finally(() => setIsSubmitting(false));\n  };\n\n  return (\n    <Formik\n      initialValues={intialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormControl as={Form} maxW=\"300px\" margin=\"10% auto\">\n        <FormLabel htmlFor=\"name\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Username\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"name\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Email\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"email\" name=\"email\" />\n          <ErrorMessage\n            name=\"email\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"name\" m=\"0 0 8px 0\">\n          <Text fontSize=\"xl\" mb={1}>\n            Password\n          </Text>\n          <Input as={Field} variant=\"filled\" type=\"password\" name=\"password\" />\n          <ErrorMessage\n            name=\"password\"\n            component={Text}\n            fontSize=\"xs\"\n            color=\"red\"\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          isLoading={isSubmitting}\n          loadingText=\"Wait...\"\n          colorScheme=\"blue\"\n          variant=\"outline\"\n          w=\"100%\"\n        >\n          Register\n        </Button>\n      </FormControl>\n    </Formik>\n  );\n};\n","import { CenterContainer } from 'components/CenterContainer';\nimport { RegistrationForm } from 'components/RegistrationForm';\n\nconst Register = () => {\n  return (\n    <CenterContainer>\n      <RegistrationForm />\n    </CenterContainer>\n  );\n};\n\nexport default Register;\n"],"names":["RegistrationForm","useState","isSubmitting","setIsSubmitting","requiedMessage","dispatch","useDispatch","validationSchema","yup","shape","name","min","required","email","password","initialValues","onSubmit","userData","resetForm","register","then","response","payload","Notify","finally","as","Form","maxW","margin","htmlFor","m","fontSize","mb","I","Field","variant","type","component","Text","color","isLoading","loadingText","colorScheme","w","CenterContainer"],"sourceRoot":""}